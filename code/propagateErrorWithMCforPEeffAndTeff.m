function [teffAnnual] = propagateErrorWithMCforPEeffAndTeff(...
    nLocs,nNppAlgos,latsLocal,lonsLocal,arrayFlux)

% PROPAGATEERRORWITHMCFORPEEFFANDTEFF Calculates average PEeff and Teff 100 
% to 1000 m and propagates error from POC flux data from our compilation of
% sediment traps nad radionuclides and the UVP5-derived estimates.
%
%   INPUT: 
%       nLocs       - number of locations
%       nNppAlgos   - number of NPP algorithms
%       latsLocal   - list of latitudes for interpolation for NPP
%       lonsLocal   - list of longitudes for interpolation for NPP
%       arrayFlux   - POC flux, with dimensions: 2 (zeu, zmeso) x 12 x nLocs x 2 (avg, err)
%
%   OUTPUT:
%       teffAnnual  - transfer efficiency 100 to 1000 m, with dimensions: nLocs x 5 (median, uppCI, lowCI, max, min)
%                              
%   This script uses three external functions: 
%       extractLocalNPP.m      - custom function
%       generateMCparameters.m - from FileExchange
%       propagateErrorWithMC.m - from FileExchange
%
%   WRITTEN BY A. RUFAS, UNIVERISTY OF OXFORD
%   Anna.RufasBlanco@earth.ox.ac.uk
%
%   Version 1.0 - Completed 9 April 2024   
%
% =========================================================================
%%
% -------------------------------------------------------------------------
% PROCESSING STEPS
% -------------------------------------------------------------------------

%% Definitions

% Define efficiency function (for PEeff and Teff)
funcEfficiency = @(x) x(1)./x(2);

% Define parameters
% Default no. samples generated by the function 'generateMCparameters'
NUM_MONTE_CARLO_SAMPLES = 1e5; 

% Define output arrays
teffMonthly = NaN(12,nLocs,5); % 3rd dimension: 1=median, 2=upp CI, 3=low CI, 4=max, 5=min
teffMonthly_mcvals = NaN(12,nLocs,NUM_MONTE_CARLO_SAMPLES);
teffAnnual = NaN(nLocs,5);
% peeffMonthly = NaN(12,nLocs,nNppAlgos,3); % 4th dimension: 1=median, 2=upp CI, 3=low CI
% peeffMonthly_mcvals = NaN(12,nLocs,nNppAlgos,NUM_MONTE_CARLO_SAMPLES);
% peeffAnnual = NaN(nLocs,5); % 5th dimension: 1=median, 2=upp CI, 3=low CI, 4=max, 5=min

% %Get local NPP (mg C m-2 d-1) for PEeff calculations
% [nppAvg,nppErr] = extractLocalNPP(nLocs,nNppAlgos,latsLocal,lonsLocal,...
%     './data/raw/','npp_cafe_modis.mat','npp_vgpm.mat','npp_cbpm.mat');

%% Calculate monthly averages 

fprintf('\nStart monthly calculations of Teff...')

for iLoc = 1:nLocs 
    for iMonth = 1:12
        
%       % Calculate PEeff
%         for iNppAlgo = 1:nNppAlgos
%             if (~isnan(arrayFlux(1,iMonth,iLoc,1)) && ~isnan(nppAvg(iMonth,iLoc,iNppAlgo)))  
%                 A = generateMCparameters('gaussian',[arrayFlux(1,iMonth,iLoc,1),...
%                     arrayFlux(1,iMonth,iLoc,2)],'plot',false);
%                 B = generateMCparameters('gaussian',[nppAvg(iMonth,iLoc,iNppAlgo),...
%                     nppErr(iMonth,iLoc,iNppAlgo)],'plot',false);
% 
%                 % Error propagation using Monte Carlo method for a quotient 
%                 % becomes problematic when the denominator is smaller than 
%                 % the numerator
%                 [A,B] = checkForSorting(A,B); % to ensure B > A 
% 
%                 [midval_peeff,ci_peeff,funvals_peeff] = propagateErrorWithMC(funcEfficiency,[A;B],'plot',false);  
%                 peeffMonthly_mcvals(iMonth,iLoc,iNppAlgo,:) = funvals_peeff;
%                 peeffMonthly(iMonth,iLoc,iNppAlgo,1) = midval_peeff;
%                 peeffMonthly(iMonth,iLoc,iNppAlgo,2) = ci_peeff(2);
%                 peeffMonthly(iMonth,iLoc,iNppAlgo,3) = ci_peeff(1);
%                 peeffMonthly(iMonth,iLoc,iNppAlgo,4) = max(funvals_peeff);
%                 peeffMonthly(iMonth,iLoc,iNppAlgo,5) = min(funvals_peeff);
%             end
%         end % iNppAlgo

        % Calculate Teff
        if (~isnan(arrayFlux(2,iMonth,iLoc,1)) > 0 && ~isnan(arrayFlux(1,iMonth,iLoc,1)))  
            A = generateMCparameters('gaussian',[arrayFlux(2,iMonth,iLoc,1),...
                arrayFlux(2,iMonth,iLoc,2)],'plot',false);
            B = generateMCparameters('gaussian',[arrayFlux(1,iMonth,iLoc,1),...
                arrayFlux(2,iMonth,iLoc,2)],'plot',false);

            [A,B] = checkForSorting(A,B); % to ensure B > A 

            [midval_teffzeu,ci_teffzeu,funvals_teffzeu] = propagateErrorWithMC(funcEfficiency,[A;B],'plot',false);  
            ci_teffzeu(isnan(ci_teffzeu)) = 0; % when it goes beyond lower limit value of 0
            teffMonthly_mcvals(iMonth,iLoc,:) = funvals_teffzeu;
            teffMonthly(iMonth,iLoc,1) = midval_teffzeu;
            teffMonthly(iMonth,iLoc,2) = ci_teffzeu(2);
            teffMonthly(iMonth,iLoc,3) = ci_teffzeu(1);
            teffMonthly(iMonth,iLoc,4) = max(funvals_teffzeu);
            teffMonthly(iMonth,iLoc,5) = min(funvals_teffzeu);
   
        end
      
    end % iMonth
end % iLoc

fprintf('\n...done.\n')

%% Calculate annual averages

fprintf('\nStart annual calculations of Teff...')

for iLoc = 1:nLocs
    
%     % Pool all PEeff samples
%     peeffLocalSamples = squeeze(peeffMonthly_mcvals(:,iLoc,:,:));
%     peeffLocalSamples = reshape(peeffLocalSamples,[],1);
%     iNonNan = ~isnan(peeffLocalSamples(:));
%     if (sum(iNonNan) > 0)
%         [midval_peeff,ci_peeff,funvals_peeff] = propagateErrorWithMC(@mean,peeffLocalSamples(iNonNan)','plot',false);
%         peeffAnnual(iLoc,1) = midval_peeff;
%         peeffAnnual(iLoc,2) = ci_peeff(2);
%         peeffAnnual(iLoc,3) = ci_peeff(1);
%         peeffAnnual(iLoc,4) = max(funvals_peeff);
%         peeffAnnual(iLoc,5) = min(funvals_peeff);
%     end

    % Pool all Teff samples
    teffLocalSamples = squeeze(teffMonthly_mcvals(:,iLoc,:));
    teffLocalSamples = reshape(teffLocalSamples,[],1);
    iNonNan = ~isnan(teffLocalSamples(:));
    if (sum(iNonNan) > 0)
        [midval_teff,ci_teff,funvals_teff] = propagateErrorWithMC(@mean,teffLocalSamples(iNonNan)','plot',false);
        ci_teff(isnan(ci_teff)) = 0;
        teffAnnual(iLoc,1) = midval_teff;
        teffAnnual(iLoc,2) = ci_teff(2);
        teffAnnual(iLoc,3) = ci_teff(1);
        teffAnnual(iLoc,4) = max(funvals_teff);
        teffAnnual(iLoc,5) = min(funvals_teff);
    end

    fprintf('\nLocation %d',iLoc)
%     fprintf('\nThe estimated PEeff is %4.3f, with std bounds %4.3f to %4.3f',peeffAnnual(iLoc,1),peeffAnnual(iLoc,2),peeffAnnual(iLoc,3))
    fprintf('\nThe estimated Teff is %4.3f, with std bounds %4.3f to %4.3f',teffAnnual(iLoc,1),teffAnnual(iLoc,2),teffAnnual(iLoc,3))

end % iLoc

fprintf('\n...done.\n')

%%
% -------------------------------------------------------------------------
% LOCAL FUNCTIONS
% -------------------------------------------------------------------------

% *************************************************************************

function [A,B] = checkForSorting(A,B)

% Ensure B is greater than A. Each entry in B, B(i), must be larger than
% the corresponding entry in A, A(i). If it's not the case, we want to
% replace B(i) by the next entry in B that is larger than A(i).

% Get rid of negative values
A(A<0) = min(A(A>0));
B(B<0) = min(B(B>0));

for i = 1:length(A)
    if B(i) <= A(i)
        % Find the next entry in B that is larger than A(i)
        C = B(i:end);
        largerIndxs = find(C > A(i)); 
        if ~isempty(largerIndxs)
            B(i) = C(largerIndxs(1));
        % If no indexes are found with the above method, search all entries 
        % in B (instead of just B > B(i))    
        elseif isempty(largerIndxs)
            largerIndxs = find(B > A(i)); 
            if ~isempty(largerIndxs)
                B(i) = B(largerIndxs(1));
            % If there is no entry in B larger than A(i), set A(i) to the 
            % maximum value found in B   
            elseif isempty(largerIndxs)
                A(i) = max(B(i));
            end
        end
    end
end

end % checkForSorting

% *************************************************************************

end